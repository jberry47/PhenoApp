paste(sapply(x,function(i)paste("Out",i,sep = "")),collapse = "|")
15.1/0.9
15.1/0.9 - 15.1
?commandArgs
matrix(c(1,0,0,0,1,0,0,0,1),nrow=3)
det(matrix(c(1,0,0,0,1,0,0,0,1),nrow=3))
det(matrix(c-(1,0,0,0,1,0,0,0,1),nrow=3))
det(matrix(c(-1,0,0,0,1,0,0,0,1),nrow=3))
?det
?svd
?diag
library(ggplot2)
#library(corrplot)
library(FactoMineR)
library(factoextra)
#library(car)
library(reshape2)
library(grid)
library(stringr)
#library(RColorBrewer)
library(scales)
#library(multcomp)
#library(lme4)
#library(lsmeans)
library(gridExtra)
#library(ggdendro)
#library(dendextend)
#library(dendextendRcpp)
library(ALDEx2)
#library(DAtest)
library(shiny)
library(shinyBS)
library(shinydashboard)
library(DT)
library(stringr)
library(shinyjs)
library(compositions)
library(plyr)
library(ggplot2)
#library(corrplot)
library(FactoMineR)
library(factoextra)
#library(car)
library(reshape2)
library(grid)
library(stringr)
#library(RColorBrewer)
library(scales)
#library(multcomp)
#library(lme4)
#library(lsmeans)
library(gridExtra)
#library(ggdendro)
#library(dendextend)
#library(dendextendRcpp)
#library(ggdendro)
#library(dendextend)
#library(dendextendRcpp)
library(BiocParallel)
library(ALDEx2)
library(shiny)
library(shinyBS)
library(shinydashboard)
library(DT)
library(stringr)
library(shinyjs)
library(compositions)
library(plyr)
register(SnowParam(workers = 8),default = T)
registered()
??registered
register(SnowParam(workers = 8),default = T)
registered()
rm(list=ls())
shiny::runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
shiny::runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
library(ggplot2)
#library(corrplot)
library(FactoMineR)
library(factoextra)
#library(car)
library(reshape2)
library(grid)
library(stringr)
#library(RColorBrewer)
library(scales)
#library(multcomp)
#library(lme4)
#library(lsmeans)
library(gridExtra)
library(ggdendro)
library(dendextend)
library(dendextendRcpp)
library(ALDEx2)
#library(DAtest)
library(shiny)
library(shinyBS)
library(shinydashboard)
library(DT)
library(stringr)
library(shinyjs)
library(compositions)
library(plyr)
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
shiny::runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
shiny::runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
aldex
trace(aldex,edit = T)
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
trace(ALDEx2::aldex)
trace(ALDEx2::aldex,edit = T)
shiny::runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
register(SnowParam(workers = 8),default = T)
registered()
?registered
cl <- SnowParam(workers = 8)
cl
cl.instance <- register(cl,default = T)
cl.instance
registered(cl)
registered(cl.instance)
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
shiny::runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
?MulticoreParam
shiny::runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
shiny::runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
shiny::runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
library(foreach)
library(doParallel)
library(Biostrings)
jitter(1:10,0.1)
jitter(1:10,0.25)
line1 <- jitter(0:10,0.25)
jitter(0:10,0.25)
line2 <- data.frame("x"=jitter(0:10,0.25),"y"=jitter(0:10,0.25)*1.5)
line3 <- data.frame("x"=jitter(0:10,0.25),"y"=jitter(1:11,0.25))
line1 <- data.frame("x"=jitter(0:10,0.25),"y"=jitter(0:10,0.25))
?rbind
data.table::rbindlist(list(line1,line2,line3))
data.frame(data.table::rbindlist(list(line1,line2,line3)))
line1 <- data.frame("x"=jitter(0:10,0.25),"y"=jitter(0:10,0.25),"group"=rep("l1",11))
line2 <- data.frame("x"=jitter(0:10,0.25),"y"=jitter(0:10,0.25)*1.5,"group"=rep("l2",11))
line3 <- data.frame("x"=jitter(0:10,0.25),"y"=jitter(1:11,0.25),"group"=rep("l3",11))
data.frame(data.table::rbindlist(list(line1,line2,line3)))
library(ggplot2)
ggplot(s,aes(x,y))+
geom_smooth(color=group)
s <- data.frame(data.table::rbindlist(list(line1,line2,line3)))
ggplot(s,aes(x,y))+
geom_smooth(color=group)
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group))
line1 <- data.frame("x"=jitter(0:10,1),"y"=jitter(0:10,1),"group"=rep("l1",11))
line2 <- data.frame("x"=jitter(0:10,1),"y"=jitter(0:10,1)*1.5,"group"=rep("l2",11))
line3 <- data.frame("x"=jitter(0:10,1),"y"=jitter(1:11,1),"group"=rep("l3",11))
s <- data.frame(data.table::rbindlist(list(line1,line2,line3)))
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group))
line1 <- data.frame("x"=jitter(0:10,3),"y"=jitter(0:10,3),"group"=rep("l1",11))
line2 <- data.frame("x"=jitter(0:10,3),"y"=jitter(0:10,3)*1.5,"group"=rep("l2",11))
line3 <- data.frame("x"=jitter(0:10,3),"y"=jitter(1:11,3),"group"=rep("l3",11))
s <- data.frame(data.table::rbindlist(list(line1,line2,line3)))
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group))
line1 <- data.frame("x"=jitter(0:10,2),"y"=jitter(0:10,2),"group"=rep("l1",11))
line2 <- data.frame("x"=jitter(0:10,2),"y"=jitter(0:10,2)*1.5,"group"=rep("l2",11))
line3 <- data.frame("x"=jitter(0:10,2),"y"=jitter(1:11,2),"group"=rep("l3",11))
s <- data.frame(data.table::rbindlist(list(line1,line2,line3)))
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group))
line3 <- data.frame("x"=jitter(0:10,2),"y"=jitter(5:15,2),"group"=rep("l3",11))
s <- data.frame(data.table::rbindlist(list(line1,line2,line3)))
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group))
line1 <- data.frame("x"=jitter(0:10,0.1),"y"=jitter(0:10,2),"group"=rep("l1",11))
line2 <- data.frame("x"=jitter(0:10,0.1),"y"=jitter(0:10,2)*1.5,"group"=rep("l2",11))
line3 <- data.frame("x"=jitter(0:10,0.1),"y"=jitter(5:15,2),"group"=rep("l3",11))
s <- data.frame(data.table::rbindlist(list(line1,line2,line3)))
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group))
line1 <- data.frame("x"=jitter(0:10,0.3),"y"=jitter(0:10,2),"group"=rep("l1",11))
line2 <- data.frame("x"=jitter(0:10,0.3),"y"=jitter(0:10,2)*1.5,"group"=rep("l2",11))
line3 <- data.frame("x"=jitter(0:10,0.3),"y"=jitter(5:15,2),"group"=rep("l3",11))
s <- data.frame(data.table::rbindlist(list(line1,line2,line3)))
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group))
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group),method = "loess")
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group),method = "loess")+
theme_light()
ggplot(s,aes(x,y))+
geom_point(aes(color=group),method = "loess")+
theme_light()
line1 <- data.frame("x"=jitter(0:10,1),"y"=jitter(0:10,2),"group"=rep("l1",11))
line2 <- data.frame("x"=jitter(0:10,1),"y"=jitter(0:10,2)*1.5,"group"=rep("l2",11))
line3 <- data.frame("x"=jitter(0:10,1),"y"=jitter(5:15,2),"group"=rep("l3",11))
s <- data.frame(data.table::rbindlist(list(line1,line2,line3)))
ggplot(s,aes(x,y))+
geom_point(aes(color=group),method = "loess")+
theme_light()
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group),method = "loess")+
theme_light()
ggplot(s,aes(x,y))+
geom_point(aes(color=group),method = "loess")+
theme_light()
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group),method = "loess")+
theme_light()+
theme(strip.background=element_rect(fill="gray50"),
strip.text.x=element_text(size=14,color="white"),
strip.text.y=element_text(size=14,color="white"))+
theme(axis.title.x= element_text(size = 18))+
theme(axis.text = element_text(size = 14),
axis.title.y= element_blank(),
axis.text.y= element_blank())+
theme(axis.ticks.length=unit(0.2,"cm"))
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group),method = "loess")+
theme_light()+
theme(strip.background=element_rect(fill="gray50"),
strip.text.x=element_text(size=14,color="white"),
strip.text.y=element_text(size=14,color="white"))+
theme(axis.title.x= element_text(size = 18))+
theme(axis.text = element_text(size = 14),
axis.title.y= element_blank())+
theme(axis.ticks.length=unit(0.2,"cm"))
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group),method = "loess")+
theme_light()+
theme(strip.background=element_rect(fill="gray50"),
strip.text.x=element_text(size=14,color="white"),
strip.text.y=element_text(size=14,color="white"))+
theme(axis.title.x= element_text(size = 18))+
theme(axis.text = element_text(size = 14))+
theme(axis.ticks.length=unit(0.2,"cm"))
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group),method = "loess")+
theme_light()+
theme(strip.background=element_rect(fill="gray50"),
strip.text.x=element_text(size=14,color="white"),
strip.text.y=element_text(size=14,color="white"))+
theme(axis.title= element_text(size = 18))+
theme(axis.text = element_text(size = 14))+
theme(axis.ticks.length=unit(0.2,"cm"))
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group),method = "loess")+
theme_light()+
theme(axis.title= element_text(size = 18))+
theme(axis.text = element_text(size = 14))+
theme(axis.ticks.length=unit(0.2,"cm"))
line1 <- data.frame("x"=jitter(0:10,1),"y"=jitter(0:10,2),"group"=rep("l1",11))
line2 <- data.frame("x"=jitter(0:10,1),"y"=jitter(0:10,2)*1.5,"group"=rep("l2",11))
line3 <- data.frame("x"=jitter(0:10,1),"y"=jitter(5:15,2),"group"=rep("l3",11))
s <- data.frame(data.table::rbindlist(list(line1,line2,line3)))
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group),method = "loess")+
theme_light()+
theme(axis.title= element_text(size = 18))+
theme(axis.text = element_text(size = 14))+
theme(axis.ticks.length=unit(0.2,"cm"))
library(ggplot2)
line1 <- data.frame("x"=jitter(0:10,1),"y"=jitter(0:10,2),"group"=rep("l1",11))
line2 <- data.frame("x"=jitter(0:10,1),"y"=jitter(0:10,2)*1.5,"group"=rep("l2",11))
line3 <- data.frame("x"=jitter(0:10,1),"y"=jitter(5:15,2),"group"=rep("l3",11))
s <- data.frame(data.table::rbindlist(list(line1,line2,line3)))
ggplot(s,aes(x,y))+
geom_smooth(aes(color=group),method = "loess")+
theme_light()+
theme(axis.title= element_text(size = 18))+
theme(axis.text = element_text(size = 14))+
theme(axis.ticks.length=unit(0.2,"cm"))
p <- ggplot(s,aes(x,y))+
geom_smooth(aes(color=group),method = "loess")+
theme_light()+
theme(axis.title= element_text(size = 18))+
theme(axis.text = element_text(size = 14))+
theme(axis.ticks.length=unit(0.2,"cm"))
getwd()
ggsave("candidate_conversation_plot.png",plot = p, dpi = 300)
summary(glm(s,y~x))
summary(glm(data=s,y~x))
summary(glm(data=s,y~x:group))
summary(glm(data=s,y~0+ group + x:group))
library(ggplot2)
line1 <- data.frame("x"=jitter(0:10,1),"y"=jitter(0:10,2),"group"=rep("l1",11))
line2 <- data.frame("x"=jitter(0:10,1),"y"=jitter(0:10,2)*1.5,"group"=rep("l2",11))
line3 <- data.frame("x"=jitter(0:10,1),"y"=jitter(5:15,2),"group"=rep("l3",11))
s <- data.frame(data.table::rbindlist(list(line1,line2,line3)))
p <- ggplot(s,aes(x,y))+
geom_smooth(aes(color=group),method = "loess")+
theme_light()+
theme(axis.title= element_text(size = 18))+
theme(axis.text = element_text(size = 14))+
theme(axis.ticks.length=unit(0.2,"cm"))
p
summary(glm(data=s,y~0+group+x:group))
shiny::runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Plated_all_slibs/Shiny')
area_convert <- 13.2*3.7/46856
area_convert*60000
area_convert*100000
load("/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Database/Master/test/alignment_workspace.RData")
plot(myTree)
plot(tr, "u", FALSE)
plot(myTree, "u", FALSE)
myTree
plot(myTree, main="Phylogenetic Tree of Human Rel Homology Domain Sequences")
myTree <- nj(d)
library(msa)
library(seqinr)
plot(myTree, main="Phylogenetic Tree of Human Rel Homology Domain Sequences")
library(ape)
plot(myTree, main="Phylogenetic Tree of Human Rel Homology Domain Sequences")
save.image("/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Shiny/data/database_tree.RData")
rm(d)
rm(myAln)
rm(myAln2)
save.image("/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Shiny/data/database_tree.RDatada.RData")
shiny::runApp('/media/jberry/Extra Drive 1/Danforth/16S_Bacteria/Shiny')
width <- 512
p <- log(width)/log(2)
p
?fivenum
devtools::install_github("ewenharrison/finalfit")
data("iris")
iris
head(iris)
mod1 <- glm(data=iris, Sepal.Length~Species)
library(finalfit)
?finalfit
explanitory <- c("Species")
dependent <- "Sepal.Length"
library(dplyr)
iris %>% finalfit(dependent = dependent, explanatory = explanatory)
iris %>% finalfit(dependent = dependent, explanatory = explanitory)
mod1 <- glm(data=iris, Sepal.Length~Species)
mod1
iris %>% finalfit(dependent = dependent, explanatory = explanitory)
summary(mod1)
mod1 <- glm(data=iris, Sepal.Length~0+Species)
iris %>% finalfit(dependent = dependent, explanatory = explanitory)
summary(mod1)
iris %>% finalfit(dependent = dependent, explanatory = explanitory,metrics = T)
library(ggplot2)
?ggplot
shiny::runApp('/media/jberry/Extra Drive 1/Danforth/Sorghum/doe_database')
shiny::runApp('/media/jberry/Extra Drive 1/Danforth/Sorghum/doe_database')
length(list(1,2,3))
list(1,2,3)
library(xlsx)
install.packages("xlsx")
names(dat) <- projects
runApp('/media/jberry/Extra Drive 1/Danforth/Sorghum/doe_database')
library(openxlsx)
runApp('/media/jberry/Extra Drive 1/Danforth/Sorghum/doe_database')
runApp('/media/jberry/Extra Drive 1/Danforth/Sorghum/doe_database')
list.files()
list.files("Documents")
data.frame(c("1"))
?DT::renderDataTable
?DT::dataTableOutput
shiny::runApp('/media/jberry/Extra Drive 1/Danforth/Sorghum/doe_database')
runApp('/media/jberry/Extra Drive 1/Danforth/Sorghum/doe_database')
shiny::runApp('/media/jberry/Extra Drive 1/Danforth/Sorghum/doe_database')
runApp('/media/jberry/Extra Drive 1/Danforth/Sorghum/doe_database')
runApp('/media/jberry/Extra Drive 1/Danforth/Sorghum/doe_database')
library(reshape2)
library(grid)
library(stringr)
library(scales)
library(gridExtra)
library(shiny)
library(shinyBS)
library(shinydashboard)
library(DT)
library(shinyjs)
library(plyr)
ui <- dashboardPage(skin="black", title="DOE Sorghum Systems",
dashboardHeader(
title = tagList(
tags$span(
class = "logo-mini", "DOE SS"
),
tags$span(
class = "logo-lg", "DOE Sorghum Systems"
)
),
titleWidth = 450
),
dashboardSidebar(
tags$script(HTML("$('body').addClass('sidebar-mini');")),
width = 150,
sidebarMenu(
menuItem("Overview", tabName = "overview")
)
),
dashboardBody(
tags$style(HTML("
.tabbable > .nav > li[class=active]    > a {background-color: #444444; color:white}
.multicol{
-webkit-column-count: 4; /* Chrome, Safari, Opera */
-moz-column-count: 4; /* Firefox */
column-count: 4;
}
.twocol{
-webkit-column-count: 2; /* Chrome, Safari, Opera */
-moz-column-count: 2; /* Firefox */
column-count: 2;
}
.warning {
color: red;
}"
)),
tabItems(
tabItem(tabName = "overview",
box(style = "overflow-y:scroll",width=10,title = "Welcome",solidHeader = T,status = 'success',collapsible = TRUE,
tags$b("Overview"),
p("To compete in the energy market, biofuel feedstocks need to be high yielding and carbon neutral or negative. To avoid competition with existing food production systems, these crops will need to be grown on marginal lands with few inputs.  This will require the introduction of novel traits to increase resistance to abiotic stress associated with marginal soils and enhanced tolerance to seasonal droughts and heat. To address these issues, we will take a systems approach to dissect complex genotype by environment (G x E) interactions, including the microbiome, in one of the most promising lignocellulosic feedstocks:  Sorghum bicolor.  We have assembled an interdisciplinary team with a wide range of expertise in genetics, genomics, metabolite and transcript profiling, plant-microbe interactions, physiology, metagenomics, phenomics, breeding, and computational and statistical methods."),
p("Two approaches for increasing the sustainable productivity of sorghum as a biofuel feedstock will be taken in this project:"),
tags$ul(
tags$li("Microbial approach - Determine the potential for a microbial solution for enhanced stress tolerance and resource use efficiency, we will survey and characterize variations in the microbial-sorghum associations across different environments and a wide range of germplasm."),
tags$li("Genetic approach - Explore the intrinsic variations across the diverse germplasm pools of sorghum, which show wide variation in phenotype and biochemistry, to determine the genetics of abiotic stress traits.")
),
p("While finding solutions with either approach will be considered a success, there is potential for the two approaches to converge if we find plant genes or physiological mechanisms that enhance beneficial microbial associations that increase nitrogen use efficiency (NUE) or water use efficiency (WUE). This integrated analysis will examine the complex Gsorghum x Gmicrobe x E (G = genotype and E = environment)."),
p("The expected outcomes from this research are new strategies and tools for tailoring the next generation of lignocellulosic biofuel feedstocks for sustainable and highly productive energy production systems."),
tags$b("Overall project objective"),
p("We will establish a foundational, systems-level understanding of plant, microbial, and environmental interactions that will lead to translational strategies to enhance growth and sustainability of sorghum through improved genetic and microbial adaptations to water and nutrient limited environments."),
tags$b("Project Objectives"),
tags$ol(
tags$li("Conduct deep census surveys of root microbiomes concurrent with phenotypic characterizations of a diverse panel of sorghum genotypes across multiple years to define the microbes associated with the most productive lines under drought and low nitrogen conditions."),
tags$li("Associate systems-level genotypic, microbial, and environmental effects with improved sorghum performance using robust statistical approaches."),
tags$li("Develop culture collections of sorghum root/leaf associated microbes that recapitulate root-enriched sequences defined in the census."),
tags$li('Perform controlled environment experiments for in-depth characterization and hypothesis testing of Gsorghum x Gmicrobe x E interactions.'),
tags$li("Validate physiological mechanisms, map genetic loci for stress tolerance, and determine the persistence of optimal microbial strains under greenhouse and field conditions.")
)
)
)
)
)
)
server <- function(input, output){
}
rm(list=ls())
runApp('/media/jberry/Extra Drive 1/Danforth/PhenoCV_Shiny')
?any
runApp('/media/jberry/Extra Drive 1/Danforth/PhenoCV_Shiny')
runApp('/media/jberry/Extra Drive 1/Danforth/PhenoCV_Shiny')
library(RSQLite)
setwd("/media/jberry/Extra Drive 1/Danforth/PhenoCV_Shiny/data")
db <- "terra.lt4.sqlite3"
drv <- dbDriver("SQLite")
conn <- dbConnect(drv, dbname = db)
vis.df <- dbGetQuery(conn = conn, 'SELECT * FROM metadata NATURAL JOIN features WHERE imgtype = "VIS"')
vis.df = vis.df[,apply(vis.df[,seq(1, ncol(vis.df))], 2, function(x) unique(x)) != "0"]
head(vis.df)
vis.df <- dbGetQuery(conn = conn, 'SELECT * FROM features WHERE imgtype = "VIS"')
runApp('/media/jberry/Extra Drive 1/Danforth/PhenoCV_Shiny')
head(vis.df)
assoc <- read.csv("TM022.barcodes.csv")
assoc <- read.csv("TM022.barcodes.csv",header = T,stringsAsFactors = F)
head(assoc)
assoc <- read.csv("TM022.barcodes.csv",header = T,stringsAsFactors = F)[,-4]
head(assoc)
assoc <- read.csv("TM022.barcodes.csv",header = T,stringsAsFactors = F)[,-4]
head(vis.df)
colnames(vis.df)[colnames(vis.df) == "plantbarcode"] <- "Barcodes"
head(vis.df)
plyr::join(vis.df,assoc,by="Barcodes")
head(plyr::join(vis.df,assoc,by="Barcodes"))
assoc <- read.csv("TM021.barcodes.csv",header = T,stringsAsFactors = F)[,-4]
head(assoc)
head(plyr::join(vis.df,assoc,by="Barcodes"))
paste(colnames(vis.df),collapse = "','")
paste(colnames(vis.df),collapse = '","')
paste(colnames(vis.df),collapse = "','")
vis.df <- vis.df[,apply(vis.df[,seq(1, ncol(vis.df))], 2, function(x) unique(x)) != "0"]
colnames(vis.df)[colnames(vis.df) == "plantbarcode"] <- "Barcodes"
runApp('/media/jberry/Extra Drive 1/Danforth/PhenoCV_Shiny')
unique(assoc$Genotype)
assoc$Genotype
runApp('/media/jberry/Extra Drive 1/Danforth/PhenoCV_Shiny')
sv_shapes <- join(vis.df,assoc,by="Barcodes")
sv_shapes$timestamp <- strptime(sv_shapes$timestamp,format = "%Y-%m-%d %H:%M:%S")
beg <- min(sv_shapes$timestamp)
sv_shapes$DAP <- floor(as.numeric((sv_shapes$timestamp - beg)/60/60/24))+2
sv_shapes$hour <- lubridate::hour(sv_shapes$timestamp)
empties <- sv_shapes[sv_shapes$DAP == (max(sv_shapes$DAP)-1) & sv_shapes$area == 0,"Barcodes"]
sv_shapes <- sv_shapes[!(sv_shapes$Barcodes %in% empties),]
sv_shapes <- na.omit(sv_shapes)
str(sv_shapes)
str(data.frame(sv_shapes))
vis.df <- data.frame(dbGetQuery(conn = conn, 'SELECT * FROM metadata NATURAL JOIN features WHERE imgtype = "VIS"'))
str(vis.df)
vis.df <- data.frame(dbGetQuery(conn = conn, 'SELECT * FROM metadata NATURAL JOIN features WHERE imgtype = "VIS"'),stringsAsFactors = F)
str(vis.df)
runApp('/media/jberry/Extra Drive 1/Danforth/PhenoCV_Shiny')
