head(babynames)
library(dplyr)
library(tidyverse)
head(babynames)
babynames %>%
filter(name == Emily)
unique(babynames)
babynames$name == Mae
babynames$name == "Emily"
?count
count(babynames$name == "Emily")
count(babynames$name == "Emily", "TRUE")
sum(babynames$name == "Emily")
head(babynames)
babynames %>%
filter(year == 1992)
babynames %>%
filter(year == 1992) %>%
filter(name == "Emily")
babynames %>%
filter(year == 1992) %>%
filter(name == "Emily") %>%
sum(n)
babynames %>%
filter(year == 1992) %>%
filter(name == "Emily")
babynames %>%
filter(year == 1992) %>%
filter(name == "Emily") %>%
summarise(sum(n))
babynames %>%
summarise(desc(n))
summarise(desc()
head(babynames)
head(babynames)
babynames %>%
desc(n)
babynames %>%
arrange(desc(n))
babynames %>%
filter(year == 1998) %>%
arrange(desc(n))
babynames %>%
filter(year == 1998) %>%
filter(sex == F) %>%
arrange(desc(n))
babynames %>%
filter(year == 1998)
babynames %>%
filter(year == 1998) %>%
filter(sex == F)
babynames %>%
filter(year == 1998)
filter(sex == "F"") %>%
babynames %>%
filter(year == 1998) %>%
filter(sex == "F") %>%
babynames %>%
filter(year == 1998) %>%
filter(sex == "F") %>%
arrange(desc(n))
babynames %>%
filter(name == "Philip" & "Phillip")
babynames %>%
filter(name == "Philip" && "Phillip")
babynames %>%
filter(name == "Philip")
babynames %>%
filter(name == c("Philip," "Phillip"))
babynames %>%
filter(name == c("Philip," "Phillip"))
babynames %>%
filter(name == "Philip")
?filter
babynames %>%
filter(name == "Philip" & name == "Phillip")
babynames %>%
filter(name == "Phillip")
babynames %>%
filter(name == "Philip" | name == "Phillip")
babynames %>%
filter(name == "Philip" | name == "Phillip") %>%
filter(sex == "M")
babynames %>%
filter(name == "Philip" | name == "Phillip")
babynames %>%
filter(name == "Philip" | name == "Phillip") %>%
filter(sex == "M")
babynames %>%
filter(name == "Philip" | name == "Phillip") %>%
filter(sex == "M") %>%
arrange(desc(n))
?transform
states <- c("AL", "CA" ,"MS", "MO", "IA", "HI")
region <- c("ESC", "PAC" ,"ESC", "WNC", "WNC", "PAC")
pop <- c(4041, 29760, 2573, 5117, 2777, 1108)
pay <- c(27, 39, 24, 28, 28, 32)
?rbind
rbind(states, region, pop, pay)
cbind(states, region, pop, pay)
df <- cbind(states, region, pop, pay)
log(pop)
df$log_pop <- log(pop)
df$log_pop <- log(pop)
df$log_pop <- log(pop)
df
df <- cbind(states, region, pop, pay)
df
df <- data.frame(cbind(states, region, pop, pay))
df
df$log_pop <- log(pop)
df
library(ggplot2)
head(mpg)
table(mpg)
head(mpg)
?table
table(mpg)
head(mpg)
data(mpg)
table(mpg)
head(mpg)
table(mpg$fl)
mpg %>%
filter(fl = "c")
mpg %>%
filter(fl == "c")
mpg %>%
filter(fl == "c") %>%
summarise(mean(c))
mpg %>%
filter(fl == "c") %>%
summarise(mean("c"))
mpg %>%
filter(fl == "c") %>%
summarise(mean("c"))
mpg %>%
filter(fl == "c")
mpg %>%
filter(fl == "c") %>%
mean(displ)
mpg %>%
filter(fl == "c") %>%
summarise(mean(displ))
mpg %>%
filter(fl == "c") %>%
summarise(mean(displ)) %>%
summarise(sd(displ))
mpg %>%
filter(fl == "c") %>%
summarise(mean(displ))
mpg %>%
filter(fl == "c") %>%
summarise(mean(displ), median(displ), sd(displ))
mpg %>%
filter(fl == "c") %>%
summarise(mean(displ), median(displ), sd(displ), IQR(displ))
mpg %>%
filter(fl == "d") %>%
summarise(mean(displ), median(displ), sd(displ), IQR(displ))
mpg %>%
filter(fl == "e") %>%
summarise(mean(displ), median(displ), sd(displ), IQR(displ))
mpg %>%
filter(fl == "p") %>%
summarise(mean(displ), median(displ), sd(displ), IQR(displ))
mpg %>%
filter(fl == "r") %>%
summarise(mean(displ), median(displ), sd(displ), IQR(displ))
mpg %>%
filter(fl == "r") %>%
summarise(mean(displ), median(displ), sd(displ), IQR(displ))
head(mpg)
knitr::opts_chunk$set(echo = TRUE)
# shade normal function
# https://www.r-bloggers.com/how-to-shade-under-a-normal-density-in-r/
st = function(df= NULL, below=NULL, above=NULL, pcts=c(0.025, 0.975),
numpts=500, color="gray", dens=40,
justabove=FALSE, justbelow=FALSE, lines=FALSE,
between=NULL, outside=NULL, lim=c(-4,4)) {
if(is.null(df))
stop("must specify a df")
if(is.null(between)) {
below = ifelse(is.null(below), qt(pcts[1], df), below)
above = ifelse(is.null(above), qt(pcts[2], df), above)
}
if(is.null(outside) == FALSE) {
below = min(outside)
above = max(outside)
}
x.grid = seq(lim[1], lim[2], length= numpts)
dens.all = dt(x.grid, df)
if(lines == FALSE)
plot(x.grid, dens.all, type="l", xlab="t", ylab="Density")
if(lines == TRUE)
lines(x.grid,dens.all)
if(justabove == FALSE){
x.below    = x.grid[x.grid<below]
dens.below = dens.all[x.grid<below]
polygon(c(x.below,rev(x.below)),c(rep(0,length(x.below)),rev(dens.below)),col=color,density=dens)
}
if(justbelow == FALSE){
x.above = x.grid[x.grid > above]
dens.above = dens.all[x.grid > above]
polygon(c(x.above, rev(x.above)),
c(rep(0,length(x.above)), rev(dens.above)),
col=color, density=dens)
}
if(is.null(between) == FALSE){
from = min(between)
to = max(between)
x.between = x.grid[x.grid > from & x.grid < to]
dens.between = dens.all[x.grid > from & x.grid < to]
polygon(c(x.between,rev(x.between)),
c(rep(0,length(x.between)), rev(dens.between)),
col=color, density=dens)
}
}
# dataset
df.intake <- read.csv("intake.csv")
# dataset
df.intake <- read.csv("intake.csv")
shiny::runApp('/media/emi/ExtraDrive1/danforth/shinyApps/Shiny-cassava_atlas')
?datatable
?actionButton
runApp('/media/emi/ExtraDrive1/danforth/shinyApps/Shiny-cassava_atlas')
load("data/des.RData")
setwd("/media/emi/ExtraDrive1/danforth/shinyApps/Shiny-cassava_atlas/data")
setwd("/media/emi/ExtraDrive1/danforth/shinyApps/Shiny-cassava_atlas")
load("data/des.RData")
load("data/cd.RData")
load("data/bg.RData")
load("data/at.RData")
runApp()
runApp()
runApp('/media/emi/ExtraDrive1/danforth/github_repositories/Shiny-cassava_atlas')
?qt
qt(500, 47, lower.tail = T)
qt(p = 0.01, 47, lower.tail = T)
qt(p = 0.99, 47, lower.tail = T)
shiny::runApp('/media/emi/ExtraDrive1/danforth/shinyApps/cas_xam_2014')
?tabPanel
runApp('/media/emi/ExtraDrive1/danforth/shinyApps/cas_xam_2014')
knitr::opts_chunk$set(echo = TRUE)
## Your code goes here! Add comments like I did above...
library(gapminder)
data("gapminder")
head(gapminder)
?gapminder
head(gapminder)
#inspecting data
head(gapminder)
#scatterplot for income and life expectancy
ggplot(gapminder,aes(gpdPercap,lifeExp)) +
geom_point()
library(ggplot2)
#scatterplot for income and life expectancy
ggplot(gapminder,aes(gpdPercap,lifeExp)) +
geom_point()
#scatterplot for income and life expectancy
ggplot(gapminder,aes(gdpPercap,lifeExp)) +
geom_point()
#scatterplot for gdp and life expectancy
ggplot(gapminder,aes(gdpPercap,lifeExp)) +
geom_point()+
geom_smooth(method = 'lm',
se = F)
#scatterplot for gdp and life expectancry with loess line
ggplot(gapminder,aes(gdpPercap,lifeExp)) +
geom_point()+
geom_smooth(method = 'loess',
se = F)
knitr::opts_chunk$set(echo = TRUE)
## Load the library
library(carData)
## Load the data from the library
data("Leinhardt")
## print top 4 rows
head(Leinhardt,4)
## check the help
?Leinhardt
## Your code goes here! Add comments like I did above...
library(gapminder)
#loading in data
data("gapminder")
#inspecting data
head(gapminder)
#looking at documentation
?gapminder
## look at data
head(Leinhardt)
## summary statistics for infat mortality
library(Hmisc)
describe(Leinhardt$infant)
## Plot distribution of infant mortality
library(ggplot2)
## histogram
ggplot(Leinhardt,aes(infant)) +
geom_histogram()
## density
ggplot(Leinhardt,aes(infant)) +
geom_density(fill='red',alpha=0.5)
## make scatter plot
ggplot(Leinhardt,aes(income,infant)) +
geom_point()
## make scatter plot
ggplot(Leinhardt,aes(income,infant)) +
geom_point() +
geom_smooth(method = 'lm',
se = F)
## make scatter plot
ggplot(Leinhardt,aes(income,infant)) +
geom_point() +
geom_smooth(method = 'loess',
se = F)
## Calculate correlation
cor(Leinhardt$income,
Leinhardt$infant,
use = 'complete.obs')
## Calculate correlation and request statistical test with p values
cor_result_1 <-
cor.test(Leinhardt$income,Leinhardt$infant)
## print the result
cor_result_1
## explore this result
names(cor_result_1)
str(cor_result_1)
## access the correlation
cor_result_1$estimate
## access the p-value
cor_result_1$p.value
## Calculate Kendall correlation
cor(Leinhardt$income,
Leinhardt$infant,
use = 'complete.obs',
method = 'kendall')
## Calculate correlation and request statistical test with p values
cor_result_2 <-
cor.test(Leinhardt$income,
Leinhardt$infant,
method = 'kendall')
## print the result
cor_result_2
x <- 1:10
y <- -3*x + x**2
plot(x,y)
cor(x,y,method = 'pearson')
cor(x,y,method = 'kendall')
## set seed for reproducibel results (so we all get the same answer from the 'simulated' data!)
set.seed(12)
## Simulate an x variable from the uniform distribution:
x_var <- runif(50,1,20)
## simulate an outcome with positive linear correlation:
y_var1 <-
10 + 5*x_var + rnorm(x_var,mean = 0,sd = 7)
plot(x_var,y_var1)
## simulate an outcome with negative linear correlation:
y_var2 <-
10 + -5*x_var + rnorm(x_var,mean = 0,sd = 7)
plot(x_var,y_var2)
## simulate an outcome with positive non-linear correlation:
y_var3 <-
-3*x_var + 0.4*x_var**2 + rnorm(x_var,mean = 0,sd = 3)
plot(x_var,y_var3)
## simulate an outcome with a curvy relationship:
y_var4 <-
6*scale(x_var)**2 + rnorm(scale(x_var),mean = 0,sd = 1.3)
plot(x_var,y_var4)
#scatterplot for gdp and life expectancy with straight line
ggplot(gapminder,aes(gdpPercap,lifeExp)) +
geom_point()+
geom_smooth(method = 'lm',
se = F)
#scatterplot for gdp and life expectancry with loess line
ggplot(gapminder,aes(gdpPercap,lifeExp)) +
geom_point()+
geom_smooth(method = 'loess',
se = F)
#calculate linear correlation coefficient for income and life expectancy
cor.test(gapminder$gdpPercap,gapminder$lifeExp)
#calculate linear correlation coefficient for income and life expectancy
cor(gapminder$gdpPercap,gapminder$lifeExp)
?cor
#calculate linear correlation coefficient for income and life expectancy
cor(gapminder$gdpPercap,gapminder$lifeExp, use = 'complete.obs')
cor.test(gapminder$gdpPercap,gapminder$lifeExp)
cor(gapminder$gdpPercap,gapminder$lifeExp, use = 'complete.obs', method = 'kendall')
cor.test(gapminder$gdpPercap,gapminder$lifeExp, method = 'kendall')
cor.test(gapminder$gdpPercap,gapminder$lifeExp)
cor.test(gapminder$gdpPercap,gapminder$lifeExp, method = 'kendall')
cor(gapminder$gdpPercap,gapminder$lifeExp, use = 'complete.obs', method = 'kendall')
cor.test(gapminder$gdpPercap,gapminder$lifeExp, method = 'kendall')
## Simulate an x variable from the uniform distribution:
x_var <- runif(50,1,20)
## set seed for reproducibel results (so we all get the same answer from the 'simulated' data!)
set.seed(12)
## Simulate an x variable from the uniform distribution:
x_var <- runif(50,1,20)
## simulate an outcome with positive linear correlation:
y_var1 <-
10 + 5*x_var + rnorm(x_var,mean = 0,sd = 7)
## simulate an outcome with negative linear correlation:
y_var2 <-
10 + -5*x_var + rnorm(x_var,mean = 0,sd = 7)
## simulate an outcome with positive non-linear correlation:
y_var3 <-
-3*x_var + 0.4*x_var**2 + rnorm(x_var,mean = 0,sd = 3)
## simulate an outcome with a curvy relationship:
y_var4 <-
6*scale(x_var)**2 + rnorm(scale(x_var),mean = 0,sd = 1.3)
plot(x_var,y_var1)
plot(x_var,y_var2)
plot(x_var,y_var3)
plot(x_var,y_var4)
## simulate an outcome with positive linear correlation:
y_var1 <-
10 + 5*x_var + rnorm(x_var,mean = 0,sd = 7)
plot(x_var,y_var1)
plot(x_var,y_var2)
plot(x_var,y_var3)
plot(x_var,y_var4)
cor(x_var, y_var1, use = 'complete.obs')
cor(x_var, y_var1, use = 'complete.obs')
cor(x_var, y_var1, use = 'complete.obs', method = 'kendall')
plot(x_var,y_var1)
cor(x_var, y_var2, use = 'complete.obs')
cor(x_var, y_var2, use = 'complete.obs', method = 'kendall')
cor(x_var, y_var3, use = 'complete.obs')
cor(x_var, y_var3, use = 'complete.obs', method = 'kendall')
cor(x_var, y_var4, use = 'complete.obs')
cor(x_var, y_var4, use = 'complete.obs', method = 'kendall')
cor(x_var, y_var1, use = 'complete.obs')
cor(x_var, y_var1, use = 'complete.obs', method = 'kendall')
cor(x_var, y_var2, use = 'complete.obs')
cor(x_var, y_var2, use = 'complete.obs', method = 'kendall')
cor(x_var, y_var3, use = 'complete.obs')
cor(x_var, y_var3, use = 'complete.obs', method = 'kendall')
cor(x_var, y_var4, use = 'complete.obs')
cor(x_var, y_var4, use = 'complete.obs', method = 'kendall')
plot(x_var,y_var3)
cor(x_var, y_var3, use = 'complete.obs')
cor(x_var, y_var3, use = 'complete.obs', method = 'kendall')
cor(x_var, y_var1, use = 'complete.obs')
cor(x_var, y_var1, use = 'complete.obs', method = 'kendall')
cor(x_var, y_var2, use = 'complete.obs')
cor(x_var, y_var2, use = 'complete.obs', method = 'kendall')
cor(x_var, y_var3, use = 'complete.obs')
cor(x_var, y_var3, use = 'complete.obs', method = 'kendall')
cor(x_var, y_var4, use = 'complete.obs')
cor(x_var, y_var4, use = 'complete.obs', method = 'kendall')
head(gapminder)
#fitting null model...
ggplot(gapminder,aes(lifeExp)) +
geom_density(fill='grey',alpha=0.5) +
geom_vline(color='red',
xintercept = mean(gapminder$lifeExp,na.rm=T)) +
geom_vline(color='black',
xintercept = median(gapminder$lifeExp,na.rm=T))
lm(lifeExp~gdpPercap, data=gapminder)
summary(lm(lifeExp~gdpPercap, data=gapminder))
library(dplyr)
gapminder %>%
group_by(gdpPercap) %>%
summarise(mean_lifeExp=mean(lifeExp,na.rm=T))
data("Leinhardt")
mod1 <-
lm(infant~oil,
data=Leinhardt)
summary(mod1)
Leinhardt %>%
group_by(oil) %>%
summarise(mean_infant=mean(infant,na.rm=T))
?lm
summary(lm(lifeExp~gdpPercap, data=gapminder))
ggplot(gapminder, aes(x = lifeExp, y = gdpPercap)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
summary(lm(lifeExp~gdpPercap, data=gapminder))
head(gapminder)
summary(lm(lifeExp~year, data=gapminder))
ggplot(gapminder, aes(x = year, y = lifeExp)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
summary(lm(lifeExp~year, data=gapminder))
summary(lm(lifeExp~gdpPercap, data=gapminder))
summary(lm(lifeExp~year, data=gapminder))
summary(lm(lifeExp~gdpPercap, data=gapminder))
summary(lm(lifeExp~year, data=gapminder))
summary(lm(lifeExp~year, data=gapminder))
log(6)
expr(6)
exp(6)
?log
?expand.model.frame
?exp
log(6)
exp(1.791759)
shiny::runApp('/media/emi/ExtraDrive1/danforth/github_repositories/PhenoApp')
runApp('/media/emi/ExtraDrive1/danforth/github_repositories/PhenoApp')
?seq
runApp('/media/emi/ExtraDrive1/danforth/github_repositories/PhenoApp')
(0, 24, 2)
seq(0, 24, 2)
?scale_x_continuous
runApp('/media/emi/ExtraDrive1/danforth/github_repositories/PhenoApp')
?POSIXct
?strptime
runApp('/media/emi/ExtraDrive1/danforth/github_repositories/PhenoApp')
shiny::runApp('/media/emi/ExtraDrive1/danforth/github_repositories/PhenoApp')
